swagger: "2.0"
info:
  description: "This is the metadata service of consort-group. It handels CRU(D)-operations for the application metadata."
  version: "1.0.0"
  title: "metadata-service"
  contact:
    email: "manuel.hiemer@consort-it.de"
basePath: "/api/v1/metadata-service"
schemes:
- "http"
- "https"
paths:
  /projects:
    get:
      operationId: "getProjects"
      tags:
        - Project
      summary: "Get the projects available in the current environment."
      produces:
      - "application/json"
      responses:
        200:
          description: "Returns all projects in the current environment."
          schema:
            type: array
            items:
              $ref: "#/definitions/Project"
    post:
      operationId: "createProject"
      tags:
        - Project
      summary: "Create a new project in the current environment."
      produces:
      - "application/json"
      parameters:
        - in: body
          name: body
          description: Project object that should be added to the current environment. ID will not be posted, but auto-generated by the server and included in response.
          required: true
          schema:
            $ref: '#/definitions/NewProject'
      responses:
        200:
          description: "Returns the newly generated project (with auto-generated id)."
          schema:
            $ref: "#/definitions/Project"
        400:
          description: "Something was wrong with the client request."
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: "The request did not contain a valid authentication header."
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Something bad happened on the server."
          schema:
            $ref: "#/definitions/ErrorResponse"
  /projects/{id}:
    parameters:
      - name: "id"
        in: "path"
        description: "The id of the project"
        required: true
        type: "string"
        format: uuid
    get:
      operationId: "getProjectById"
      tags:
        - Project
      summary: "Get the project with the given id."
      produces:
        - "application/json"
      responses:
        200:
          description: "The Project with the given id"
          schema:
            $ref: "#/definitions/Project"
        404:
          description: "The Project with the given id does not exist."
          schema:
            $ref: "#/definitions/ErrorResponse"
        400:
          description: "Something was wrong with the client request."
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: "The request did not contain a valid authentication header."
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Something bad happened on the server."
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      operationId: "updateProject"
      tags:
        - Project
      summary: "Update an existing project in the current environment."
      produces:
      - "application/json"
      parameters:
        - in: body
          name: body
          description: Project object that should be added to the current environment. ID will not be posted, but auto-generated by the server and included in response.
          required: true
          schema:
            $ref: '#/definitions/Project'
      responses:
        200:
          description: "Returns the updated project."
          schema:
            $ref: "#/definitions/Project"
        400:
          description: "Something was wrong with the client request."
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: "The request did not contain a valid authentication header."
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Something bad happened on the server."
          schema:
            $ref: "#/definitions/ErrorResponse"

definitions:
    NewProject:
      description: "This entity will be used to create new Projects. A new uuid will be auto-generated by the server when creating a new Project."
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
    Project:
      description: "A project is the 'root entity' of CME. It contains Services."
      allOf:
        - $ref: "#/definitions/NewProject"
        - type: object
          required:
            - id
            - team
            - phases
          properties:
            id:
              type: string
            team:
              type: array
              items:
                $ref: "#/definitions/Person"
            context:
              type: string
              description: "e.g. as base64 encoded image, as mermaid markup (https://github.com/knsv/mermaid), link, plantUML ..."
            phases:
              description: The phases of this project
              type: array
              items:
                $ref: "#/definitions/Phase"
    Person:
      type: object
      required:
        - name
        - roles
        - email
      properties:
        name:
          type: string
        roles:
          type: array
          items: 
            type: string
        email:
          type: string
          format: email
    Phase:
      type: object
      required:
        - name
        - services
      properties:
        name:
          type: string
        services:
          type: array
          items:
            $ref: "#/definitions/Service"
    Service:
      type: object
      required:
        - name
        - serviceType
      properties:
        name:
          type: string
          example: metadata-service
        description:
          type: string
          example: "Contains all meta-data which is needed to fill the CME2 Workbench"
        icon:
          type: string
          example: "add_shopping_cart"
          description: A string describing the icon of the service in google material icon font (https://material.io/icons)
        serviceType:
          type: string
          enum:
            - UI
            - Backend
        url:
          type: string
          example: "https://cme.dev.k8s.consort-it.de/api/v1/metadata-service"
        messageQueue:
          type: string
          description: "Name of the Message Queue where the service has subscribed to"
        dependencies:
          type: string
          description: "Other microservice to whom content is provided"
        persistence:
          type: string
          description: "Name of the persisten storage where data is collected from"
    ErrorResponse:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          pattern: '^MDS-\d+$'
          description: "This error code should have the format 'MDS-XXX' where XXX is an integer. It is used to uniquely distinguish different error cases in order to display a suitable and translatable error message on the UI."
          example: "MDS-1234"
        message:
          type: string
          description: "Should contain a short, meaningful description of the error case. Might be displayed to the end user."
          example: "Could not create service 'some-name' because this service already exists."
